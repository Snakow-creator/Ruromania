from aiogram.types import Message, CallbackQuery
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.fsm.context import FSMContext
import apps.handlers as h
import apps.keyboards as kb
import data.requests as rq
import time

value_data = {}
bet = {}


# –ù–∞—á–∞–ª–æ
async def input_bet(message: Message, state: FSMContext):
    await state.set_state(h.Game.slot)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —Ä–µ–∂–∏–º–µ —Å–ª–æ—Ç—ã!"
        "\nüü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞"
        "\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏(c—Ç–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ):"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞–≤–æ–∫, –∑–∞–ø—É—Å–∫ —Å–ª–æ—Ç–∞
async def slot(message: Message, state: FSMContext):
    await state.clear()
    try:
        bet[message.from_user.id] = int(message.text)
        user_bet = bet.get(message.from_user.id, 0)
        user_money = await rq.check_balance(message.from_user.id)
        if user_money >= user_bet:
            value = await message.answer_dice(emoji=DiceEmoji.SLOT_MACHINE)
            value_data[message.from_user.id] = value.dice.value
            await rq.deprive_balance(tg_id=message.from_user.id, text_money=user_bet)
            await slot_checker(message)
        else:
            await message.answer(
                "–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥. –•–≤–∞—Ç–∏—Ç —Å–ª–∏–≤–∞—Ç—å –±–∞–±–ª–æ –∏–¥–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –∑–∞ –Ω–æ–≤—ã–º!"
            )
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –¢–µ–±–µ –Ω—É–∂–Ω–æ –≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ø–æ–Ω—è–ª?")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–π–≥—Ä—ã—à–∞
async def slot_checker(message: Message):
    user_bet = bet.get(message.from_user.id, 0)
    user_value = value_data.get(message.from_user.id, 0)
    time.sleep(2.5)
    if user_value == 64:
        await message.answer("–î–ñ–ñ–ñ–ñ–ï–ö–ö–ö–ü–û–¢!", reply_markup=kb.slot_button)
        user_bet *= 10
        await rq.change_balance(tg_id=message.from_user.id, text_money=user_bet)
    elif user_value in (52, 63, 62, 61, 60, 56, 48, 32, 16):
        time.sleep(0.5)
        user_bet *= 3
        await rq.change_balance(tg_id=message.from_user.id, text_money=user_bet)
        await message.answer(
            f"2 —Å–µ–º–µ—Ä–∫–∏ —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )
    elif user_value == 1:
        user_bet *= 5
        await rq.change_balance(tg_id=message.from_user.id, text_money=user_bet)
        await message.answer(
            f"3 –ë–∞—Ä–∞, —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )
    elif user_value in (2, 3, 4, 5, 9, 13, 17, 33, 49):
        user_bet *= 1.5
        await rq.change_balance(tg_id=message.from_user.id, text_money=user_bet)
        await message.answer(
            f"2 –ë–∞—Ä–∞, —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )

    elif user_value == 22:
        user_bet *= 3
        await rq.change_balance(tg_id=message.from_user.id, text_money=user_bet)
        await message.answer(
            f"3 —á–µ—Ä–Ω–∏–∫–∏, —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )
    elif user_value == 33:
        user_bet *= 2
        await rq.change_balance(tg_id=message.from_user.id, text_money=user_bet)
        await message.answer(
            f"3 –ª–∏–º–æ–Ω–∞, —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª‚òπÔ∏è.", reply_markup=kb.slot_button)


# –ö–æ–ª–ª–±–µ–∫–∏, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫
async def slot_callback(callback: CallbackQuery):
    await callback.answer("")
    user_bet = bet.get(callback.from_user.id, 0)
    user_money = await rq.check_balance(callback.from_user.id)
    if user_money >= user_bet:
        value = await callback.message.answer_dice(emoji=DiceEmoji.SLOT_MACHINE)
        value_data[callback.from_user.id] = value.dice.value
        await rq.deprive_balance(tg_id=callback.from_user.id, text_money=user_bet)
        await slot_checker_callback(callback)
    else:
        await callback.message.edit_text(
            "–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥. –•–≤–∞—Ç–∏—Ç —Å–ª–∏–≤–∞—Ç—å –±–∞–±–ª–æ –∏–¥–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –∑–∞ –Ω–æ–≤—ã–º!"
        )


async def slot_checker_callback(callback: CallbackQuery):
    user_bet = bet.get(callback.from_user.id, 0)
    user_value = value_data.get(callback.from_user.id, 0)
    time.sleep(2.5)
    if user_value == 64:
        await callback.message.answer("–î–ñ–ñ–ñ–ñ–ï–ö–ö–ö–ü–û–¢!", reply_markup=kb.slot_button)
        user_bet *= 10
        await rq.change_balance(tg_id=callback.from_user.id, text_money=user_bet)
    elif user_value in (52, 63, 62, 61, 60, 56, 48, 32, 16):
        user_bet *= 3
        await rq.change_balance(tg_id=callback.from_user.id, text_money=user_bet)
        await callback.message.answer(
            f"2 —Å–µ–º–µ—Ä–∫–∏ —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )
    elif user_value in (2, 3, 4, 5, 9, 13, 17, 33, 49):
        user_bet *= 1.5
        await rq.change_balance(tg_id=callback.from_user.id, text_money=user_bet)
        await callback.message.answer(
            f"2 –ë–∞—Ä–∞, —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )
    elif user_value == 1:
        user_bet *= 5
        await rq.change_balance(tg_id=callback.from_user.id, text_money=user_bet)
        await callback.message.answer(
            f"3 –ë–∞—Ä–∞, —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )
    elif user_value == 22:
        user_bet *= 3
        await rq.change_balance(tg_id=callback.from_user.id, text_money=user_bet)
        await callback.message.answer(
            f"3 —á–µ—Ä–Ω–∏–∫–∏, —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )
    elif user_value == 43:
        user_bet *= 2
        await rq.change_balance(tg_id=callback.from_user.id, text_money=user_bet)
        await callback.message.answer(
            f"3 –ª–∏–º–æ–Ω–∞, —Ç—ã –≤—ã–π–≥—Ä–∞–ª:<b>{user_bet:,}</b>", reply_markup=kb.slot_button
        )
    else:
        await callback.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã —Å–Ω–æ–≤–∞ —Å–ª–∏–ª‚òπÔ∏è.", reply_markup=kb.slot_button
        )
