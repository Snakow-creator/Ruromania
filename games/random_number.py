from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import types
import apps.handlers as h
import apps.keyboards as kb
import data.requests as rq
import random

num = {}
num2 = {}
coefficient: float = {}
data_bet = {}
random_num: int = 0


# –§—É–Ω–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π(—Ç–µ–∫—Å—Ç)
async def dep_text(message: types.Message, bet: float, state: FSMContext):
    user_money = await rq.check_balance(message.from_user.id)
    if 100 > bet:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 100 –∑–æ–ª–æ—Ç–∞ü´∏.")
    elif user_money >= bet:
        await state.set_state(h.Game.randomnum_c)
        await message.answer(
            f"–•–æ—Ä–æ—à–æ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞: <b>{bet:,}</b>."
            "\n–ß–∏—Å–ª–æ –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å –æ—Ç 1 –¥–æ 1.000.000."
            "\n‚ûñ‚ûñ‚ûñ‚ùå‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ñ™Ô∏è‚ûñ‚ûñ‚ûñ"
            "\n–í—ã–±–µ—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:",
            reply_markup=kb.rnumbutton,
        )
    else:
        await message.answer(
            "–≠–π! –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª —Å—Ç–∞–≤–∫—É –±–æ–ª—å—à–µ —á–µ–º —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å. "
            "\n–ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å, —è –Ω–µ —Ö–æ—á—É —Ç—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ü•±."
        )
        await state.clear()


async def bet_change(message: Message, state: FSMContext):
    data_bet[message.from_user.id] = 0
    await state.set_state(h.Game.randomnum_bet)
    await message.answer(
        "–¢—ã –≤ –∏–≥—Ä–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ!"
        "\nüü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞"
        "\n–ù–∞–ø–∏—à–∏ —Å—Ç–∞–≤–∫—É –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–∏—Ç—åü´∞:"
    )


# FSM —Ö–µ–Ω–¥–ª–µ—Ä—ã
async def bet_end(message: types.Message, state: FSMContext):
    try:
        user_bet = data_bet.get(message.from_user.id, 0)
        message_bet = int(message.text)
        data_bet[message.from_user.id] = user_bet + message_bet
        await dep_text(message, user_bet + message_bet, state)
    except ValueError:
        await message.answer("–≠—É, –Ω–µ –ª–æ–º–∞–π –±–æ—Ç–∞! –í–≤–µ–¥–∏ —Å—Ç–∞–≤–∫—É –≤ —á–∏—Å–ª–∞—Ö –∞ –Ω–µ –±—É–∫–≤–∞—Ö!")
        await state.clear()


async def input_num(message: types.Message, state: FSMContext):
    try:
        global num
        message_num = int(message.text)
        num[message.from_user.id] = message_num + 0
        await state.set_state(h.Game.randomnum_c1)
        await message.answer(
            "–ß–∏—Å–ª–æ –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å –æ—Ç 1 –¥–æ 1.000.000."
            "\n‚ûñ‚ûñ‚ûñ‚ö´Ô∏è‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ùå‚ûñ‚ûñ‚ûñ"
            "\n–í—ã–±–µ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:",
            reply_markup=kb.rnumbutton,
        )
    except ValueError:
        await message.answer("–≠–π, –Ω–µ –ª–æ–º–∞–π –±–æ—Ç–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∞ –Ω–µ –±—É–∫–≤—ã!")
        await state.clear()


async def input_num2(message: types.Message, state: FSMContext):
    try:
        global num, num2
        message_num = int(message.text)
        num2[message.from_user.id] = message_num + 0
        user_num2 = num2.get(message.from_user.id, 0)
        user_num = num.get(message.from_user.id, 0)
        user_bet = data_bet.get(message.from_user.id, 0)
        if user_num2 > user_num:
            gen_range = user_num2 - user_num
            x = gen_range / 10000
            s_coefficient = x * 0.01
            x_cof = 1 / s_coefficient
            coefficient[message.from_user.id] = round(x_cof, 2)
            user_cof = coefficient.get(message.from_user.id, 0)
            await state.clear()
            await message.answer(
                f"–í—Å–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å—Ç–∞–≤–∫—É."
                f"\n–°—Ç–∞–≤–∫–∞: <b>{user_bet:,}</b>."
                f"\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>x{user_cof}</b>."
                f"\n–î–∏–∞–ø–∞–∑–æ–Ω: <b>{user_num:,}/{user_num2:,}</b>.",
                reply_markup=kb.rnumbutton_end,
            )
        else:
            await message.answer(
                "–ü–æ-–º–æ–µ–º—É —Ç—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª! –ü–æ—Å—Ç–∞–≤—å –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ —á–µ–º –ø–µ—Ä–≤–æ–µ."
            )
    except ValueError:
        await message.answer(
            "–≠–π, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é! –Ω–µ –ª–æ–º–∞–π –±–æ—Ç–∞!\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∞ –Ω–µ –±—É–∫–≤—ã!"
        )
        await state.clear()


# –ö–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–æ–∫
async def clear_rn(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(h.Game.randomnum_bet)
    await callback.message.answer(
        "–¢—ã —Å—Ç–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è.\n–ù–∞–ø–∏—à–∏ —Å—Ç–∞–≤–∫—É –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–∏—Ç—å:"
    )


async def confirm_rn(callback: types.CallbackQuery):
    user_money = await rq.check_balance(callback.from_user.id)
    user_bet = data_bet.get(callback.from_user.id, 0)
    await rq.deprive_balance(tg_id=callback.from_user.id, text_money=user_bet)
    if user_money >= user_bet:
        global random_num
        await callback.answer("")
        user_num = num.get(callback.from_user.id, 0)
        user_num2 = num2.get(callback.from_user.id, 0)
        random_num = random.randint(1, 1_000_000)
        if (random_num >= user_num) and (random_num <= user_num2):
            await win_bet(callback)

        else:
            await loss_bet(callback)
    else:
        await callback.message.answer(
            "–≠–π! –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª —Å—Ç–∞–≤–∫—É –±–æ–ª—å—à–µ —á–µ–º —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å. "
            "\n–ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å, —è –Ω–µ —Ö–æ—á—É —Ç—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ü•±."
        )


# –§—É–Ω–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π(–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫)
async def loss_bet(callback: types.CallbackQuery):
    user_bet = data_bet.get(callback.from_user.id, 0)
    await callback.message.edit_text(
        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:{user_bet:,}üòø."
        f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        f"\n–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_num:,}",
        reply_markup=kb.rnumbutton_con,
    )


async def win_bet(callback: types.CallbackQuery):
    user_bet = data_bet.get(callback.from_user.id, 0)
    user_cof = coefficient.get(callback.from_user.id, 0)
    coefficient_bet = user_cof * user_bet
    await rq.change_balance(tg_id=callback.from_user.id, text_money=coefficient_bet)
    await callback.message.edit_text(
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã –≤—ã–π–≥—Ä–∞–ª–∏:{coefficient_bet:,}üéâ."
        f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        f"\n–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_num:,}",
        reply_markup=kb.rnumbutton_con,
    )
