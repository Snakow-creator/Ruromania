from aiogram import types

import data.requests as rq
import apps.keyboards as kb
import random
import time

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
data_count = {}
data_count_bot = {}
data_deck = []
data_bet = {}
data_text = {}


# –§—É–Ω–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π(—Ç–µ–∫—Å—Ç)
async def edit_bet(callback: types.CallbackQuery, bet: float):
    blackjack_text = data_text.get(callback.from_user.id, "")
    await callback.message.edit_text(
        f"–¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É –ë–ª–µ–∫–¥–∂–µ–∫. –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞: {bet:,} " f"\n{blackjack_text}",
        reply_markup=kb.bj_keyboard(),
    )


async def bet_clear(message: types.Message):
    data_bet[message.from_user.id] = 0
    data_text[message.from_user.id] = "–¢–≤–æ–∏ —Ñ–∏—à–∫–∏:"
    await message.answer(
        "–¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É –ë–ª–µ–∫–¥–∂–µ–∫. –¢–≤–æ–∏ —Å—Ç–∞–≤–∫–∞: 0" "\n–¢–≤–æ–∏ —Ñ–∏—à–∫–∏:",
        reply_markup=kb.bj_keyboard(),
    )


async def user_counts(callback: types.CallbackQuery):
    global data_count, data_count_bot, user_count, user_count_bot
    user_count = data_count.get(callback.from_user.id, 0)
    user_count_bot = data_count_bot.get(callback.from_user.id, 0)
    await callback.message.answer(
        f"–£ —Ç–µ–±—è {user_count} –æ—á–∫–æ–≤."
        f"\n–£ –¥–∏–ª–µ—Ä–∞ {user_count_bot} –æ—á–∫–æ–≤."
        f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        f"\n–ë—É–¥–µ—à—å –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É?",
        reply_markup=kb.bj_button,
    )


# –§—É–Ω–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π(–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
async def bet_check(callback: types.CallbackQuery, bet: float):
    user_money = await rq.check_balance(callback.from_user.id)
    if user_money >= bet:
        await callback.message.edit_text("–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –∏–¥–µ—Ç –∑–∞–ø—É—Å–∫.")
        await random_blackjack(callback)
    else:
        await callback.message.edit_text(
            "–≠–π! –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª —Å—Ç–∞–≤–∫—É –±–æ–ª—å—à–µ —á–µ–º —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å. "
            "\n–ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å, —è –Ω–µ —Ö–æ—á—É —Ç—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ü•±."
        )
    time.sleep(3)
    await callback.message.delete()


# –§—É–Ω–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π(–ø–æ–¥—Å—á–µ—Ç –∫–∞—Ä—Ç, —Ä–∞–∑–¥–∞—á–∞)
async def random_blackjack(callback: types.CallbackQuery):
    global data_deck, data_count, data_count_bot
    count = 0
    count_bot = 0
    deck = [6, 7, 8, 9, 10, 2, 3, 4, 11] * 4
    random.shuffle(deck)
    time.sleep(0.8)
    await callback.message.answer("–£—Å–ø–µ—à–Ω–æ.")
    while True:
        if count < 11:
            current = deck.pop()
            count += current
            continue

        elif count_bot < 1:
            current = deck.pop()
            count_bot += current
            continue

        else:
            data_count[callback.from_user.id] = count
            data_count_bot[callback.from_user.id] = count_bot
            data_deck = deck

            await user_counts(callback)
            await callback.message.delete()
            break


async def user(callback: types.CallbackQuery, count: int):
    global user_count_bot, data_count_bot
    user_count_bot = data_count_bot.get(callback.from_user.id, 0)
    if count == 21:
        await callback.message.answer("Blackjack! –¢—ã –≤—ã–π–≥—Ä–∞–ª.")
        await win_bj(callback)
    elif count >= 21:
        await callback.message.answer("–ü—Ä–æ–∏–≥—Ä—ã—à, —Ç—ã –Ω–∞–±—Ä–∞–ª –±–æ–ª—å—à–µ 21 –æ—á–∫–∞üòì.")
        await loss_bj(callback)
    elif user_count_bot == 21:
        await callback.message.answer("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª, –±–æ—Ç –≤—ã–π–≥—Ä–∞–ª Blackjacküòì.")
        await loss_bj(callback)
    elif count == user_count_bot:
        await callback.message.answer(
            "–ù–∏—á—å—è, —Ç—ã –Ω–∞–±—Ä–∞–ª –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤üôåüèª."
        )
    else:
        await callback.message.answer(
            f"–£ —Ç–µ–±—è {count} –æ—á–∫–æ–≤."
            f"\n–£ –¥–∏–ª–µ—Ä–∞ {user_count_bot} –æ—á–∫–æ–≤."
            f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
            f"\n–ë—É–¥–µ—à—å –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É?",
            reply_markup=kb.bj_button,
        )


async def bot_bj(callback: types.CallbackQuery, count_bot: int):
    global user_count, data_count
    user_count = data_count.get(callback.from_user.id, 0)
    if user_count == 21:
        await callback.message.answer("Blackjack! –¢—ã –≤—ã–π–≥—Ä–∞–ª.")
        await win_bj(callback)
    elif count_bot == 21:
        await callback.message.answer("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, –±–æ—Ç –≤—ã–π–≥—Ä–∞–ª Blackjacküòì.")
        await loss_bj(callback)
    elif count_bot >= 21:
        await callback.message.answer("–ü–æ–±–µ–¥–∞, –±–æ—Ç –Ω–∞–±—Ä–∞–ª –±–æ–ª—å—à–µ 21 –æ—á–∫–∞.")
        await win_bj(callback)
    elif count_bot > user_count:
        await callback.message.answer("–ü—Ä–æ–∏–≥—Ä—ã—à, –±–æ—Ç –Ω–∞–±—Ä–∞–ª –±–æ–ª—å—à–µ –æ—á–∫–æ–≤üòì.")
        await loss_bj(callback)
    elif count_bot == user_count:
        await callback.message.answer(
            "–ù–∏—á—å—è, —Ç—ã –Ω–∞–±—Ä–∞–ª –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤üôåüèª."
        )
    else:
        await callback.message.answer(
            f"–£ —Ç–µ–±—è {user_count} –æ—á–∫–æ–≤."
            f"\n–£ –¥–∏–ª–µ—Ä–∞ {count_bot} –æ—á–∫–æ–≤."
            f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
            f"\n–ë—É–¥–µ—à—å –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É?",
            reply_markup=kb.bj_button,
        )


# –§—É–Ω–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π(–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫)
async def win_bj(callback: types.CallbackQuery):
    user_bet = data_bet.get(callback.from_user.id, 0)
    await rq.change_balance(tg_id=callback.from_user.id, text_money=user_bet)


async def loss_bj(callback: types.CallbackQuery):
    user_bet = data_bet.get(callback.from_user.id, 0)
    await rq.deprive_balance(tg_id=callback.from_user.id, text_money=user_bet)


# –•–µ–Ω–¥–ª–µ—Ä—ã(–∫–Ω–æ–ø–∫–∏)
async def blackjack(message: types.Message):
    await bet_clear(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def bet_callback(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    func = actions[action]
    await func(callback)


async def hit(callback: types.CallbackQuery):
    await callback.answer("")
    global data_count, user_count
    user_count = data_count.get(callback.from_user.id, 0)
    current = data_deck.pop()
    time.sleep(0.3)
    await callback.message.edit_text(f"–¢–µ–±–µ –≤—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º: {current} –æ—á–∫–æ–≤")
    data_count[callback.from_user.id] = user_count + current
    await user(callback, user_count + current)


async def stand(callback: types.CallbackQuery):
    await callback.answer("")
    global data_count_bot, user_count_bot
    user_count_bot = data_count_bot.get(callback.from_user.id, 0)
    current = data_deck.pop()
    time.sleep(0.3)
    await callback.message.edit_text(
        f"–î–∏–ª–µ—Ä—É –≤—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º: {current} –æ—á–∫–æ–≤"
    )
    data_count_bot[callback.from_user.id] = user_count_bot + current
    await bot_bj(callback, user_count_bot + current)


# –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫
async def one_hundred(callback: types.CallbackQuery):
    blackjack_text = data_text.get(callback.from_user.id, "")
    user_bet = data_bet.get(callback.from_user.id, 0)
    data_text[callback.from_user.id] = blackjack_text + "üü¢"
    data_bet[callback.from_user.id] = user_bet + 100
    await edit_bet(callback, user_bet + 100)


async def five_hundred(callback: types.CallbackQuery):
    blackjack_text = data_text.get(callback.from_user.id, "")
    user_bet = data_bet.get(callback.from_user.id, 0)
    data_text[callback.from_user.id] = blackjack_text + "üü°"
    data_bet[callback.from_user.id] = user_bet + 500
    await edit_bet(callback, user_bet + 500)


async def one_thousand(callback: types.CallbackQuery):
    blackjack_text = data_text.get(callback.from_user.id, "")
    user_bet = data_bet.get(callback.from_user.id, 0)
    data_text[callback.from_user.id] = blackjack_text + "üî¥"
    data_bet[callback.from_user.id] = user_bet + 1000
    await edit_bet(callback, user_bet + 1000)


async def five_thousand(callback: types.CallbackQuery):
    blackjack_text = data_text.get(callback.from_user.id, "")
    user_bet = data_bet.get(callback.from_user.id, 0)
    data_text[callback.from_user.id] = blackjack_text + "üü£"
    data_bet[callback.from_user.id] = user_bet + 5000
    await edit_bet(callback, user_bet + 5000)


async def ten_thousand(callback: types.CallbackQuery):
    blackjack_text = data_text.get(callback.from_user.id, "")
    user_bet = data_bet.get(callback.from_user.id, 0)
    data_text[callback.from_user.id] = blackjack_text + "üü†"
    data_bet[callback.from_user.id] = user_bet + 10000
    await edit_bet(callback, user_bet + 10000)


async def fifty_thousand(callback: types.CallbackQuery):
    blackjack_text = data_text.get(callback.from_user.id, "")
    user_bet = data_bet.get(callback.from_user.id, 0)
    data_text[callback.from_user.id] = blackjack_text + "üîµ"
    data_bet[callback.from_user.id] = user_bet + 50000
    await edit_bet(callback, user_bet + 50000)


async def one_hundred_thousand(callback: types.CallbackQuery):
    blackjack_text = data_text.get(callback.from_user.id, "")
    user_bet = data_bet.get(callback.from_user.id, 0)
    data_text[callback.from_user.id] = blackjack_text + "‚ö™Ô∏è"
    data_bet[callback.from_user.id] = user_bet + 100000
    await edit_bet(callback, user_bet + 100000)


async def five_hundred_thousand(callback: types.CallbackQuery):
    blackjack_text = data_text.get(callback.from_user.id, "")
    user_bet = data_bet.get(callback.from_user.id, 0)
    data_text[callback.from_user.id] = blackjack_text + "üü§"
    data_bet[callback.from_user.id] = user_bet + 500000
    await edit_bet(callback, user_bet + 500000)


async def clear_bet(callback: types.CallbackQuery):
    data_bet[callback.from_user.id] = 0
    user_bet = data_bet.get(callback.from_user.id, 0)
    data_text[callback.from_user.id] = "–¢–≤–æ–∏ —Ñ–∏—à–∫–∏:"
    await edit_bet(callback, user_bet + 0)


async def confirm(callback: types.CallbackQuery):
    user_bet = data_bet.get(callback.from_user.id, 0)
    await bet_check(callback, user_bet + 0)


actions = {
    "hundred": one_hundred,
    "fivehundred": five_hundred,
    "thousand": one_thousand,
    "fivethousand": five_thousand,
    "tenthousand": ten_thousand,
    "fiftythousand": fifty_thousand,
    "hundredthousand": one_hundred_thousand,
    "fivehundredthousand": five_hundred_thousand,
    "clearbet": clear_bet,
    "confirmbet": confirm,
}
