from aiogram import types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import data.requests as rq
import apps.keyboards as kb
import apps.handlers as h


# –§—É–Ω–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π:
async def get_balance_text(message: types.Message, balance: float):
    await message.answer(
        f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b>. \n–•–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å?",
        reply_markup=kb.keyboard_money(),
    )


async def dep_balance_text(message: types.Message, balance: float):
    await message.answer(
        f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b>. \n–£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏:"
    )


# –ë–∞–ª–∞–Ω—Å, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:
async def check_money(message: Message):
    user_money = await rq.check_balance(message.from_user.id)
    await get_balance_text(message, user_money)


async def get_money(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    if action == "yes":
        await callback.answer("")
        await state.set_state(h.Bot.money_get)
        await callback.message.edit_text(
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—à—å –≤–ª–∏—Ç—å –≤ –º–µ–Ω—è:"
        )
    elif action == "no":
        await callback.answer("")
        await callback.message.edit_text("–¢—ã –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç–¥–∞–≤–∞—Ç—å –Ω–∞–º —Å–≤–æ–∏ –¥–µ–Ω—é–∂–∫–∏üò¢.")


async def get_balance_two(message: types.Message, state: FSMContext):
    try:
        user_money = await rq.check_balance(message.from_user.id)
        message_money = int(message.text)
        await state.clear()
        if user_money <= 1_000_000:
            if message_money <= 1_000_000:
                await rq.change_balance(
                    text_money=message_money, tg_id=message.from_user.id
                )
                await get_balance_text(message, user_money + message_money)
            else:
                await message.answer(
                    "–û—à–∏–±–∫–∞, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ–ª–æ–∂–∏—Ç—å –±–æ–ª—å—à–µ 1 –º–∏–ª–ª–∏–æ–Ω–∞."
                )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞! –£ —Ç–µ–±—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥!\n–°–ª–µ–π –∏—Ö –≤ –∫–∞–∑–∏–Ω–æ!"
            )
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞, –Ω–µ –ø–∏—à–∏ –±–µ–ª–µ–±–µ—Ä–¥—É –∫–æ—Ç–æ—Ä—É—é —è –Ω–µ —Å–º–æ–≥—É –ø–æ–Ω—è—Ç—å, –≤–µ–¥—å –º–æ—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ —á–∏—Å–ª–∞."
        )


# –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:
async def dep_balance(message: Message, state: FSMContext):
    user_money = await rq.check_balance(message.from_user.id)
    await state.set_state(h.Bot.dep_summa)
    await dep_balance_text(message, user_money)
